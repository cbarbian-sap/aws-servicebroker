AWSTemplateFormatVersion: 2010-09-09
Description: AWS Service Broker - Amazon ElastiCache for redis ()
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
    - AWS
    - elasticache
    - redis
    Name: elasticacheredis
    DisplayName: Amazon ElastiCache for redis
    LongDescription: Amazon ElastiCache is a web service that makes it easy to set
      up, manage, and scale distributed in-memory cache environments in the cloud.
      It provides a high performance, resizeable, and cost-effective in-memory cache,
      while removing the complexity associated with deploying and managing a distributed
      cache environment.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/Database_AmazonElasticCache_LARGE.png
    DocumentationUrl: https://aws.amazon.com/documentation/elasticache/
    ProviderDisplayName: Amazon Web Services
    ServicePlans:
      production:
        DisplayName: Production
        Description: Configuration designed for production deployments
        LongDescription: Creates an Amazon ElastiCache for redis, optimised for
          production use
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues:
          AutomaticFailoverEnabled: 'true'
          CidrBlocks: Auto
          CidrSize: '27'
          AtRestEncryptionEnabled: 'true'
          Port: '6379'
          TransitEncryptionEnabled: 'true'
          AuthToken: Auto
          SnapshotRetentionLimit: '35'
      custom:
        DisplayName: Custom
        Description: Custom Configuration for Advanced deployments
        LongDescription: Creates an Amazon ElastiCache for redis with custom
          configuration
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues: {}
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Elasticache Settings
      Parameters:
      - EngineVersion
      - CacheNodeType
      - AutomaticFailoverEnabled
      - NumNodeGroups
      - ReplicasPerNodeGroup
    - Label:
        default: Network and Security
      Parameters:
      - VpcId
      - CidrBlocks
      - CidrRange
      - CidrSize
      - NumberOfAvailabilityZones
      - AvailabilityZones
      - AccessCidr
      - AtRestEncryptionEnabled
      - Port
      - TransitEncryptionEnabled
      - AuthToken
    - Label:
        default: Backup
      Parameters:
      - SnapshotRetentionLimit
      - SnapshotWindow
    - Label:
        default: Maintenance
      Parameters:
      - PreferredMaintenanceWindowDay
      - PreferredMaintenanceWindowStartTime
      - PreferredMaintenanceWindowEndTime
    ParameterLabels:
      EngineVersion:
        default: Engine Version
      CacheNodeType:
        default: Cache Node Type
      AutomaticFailoverEnabled:
        default: Enable Automatic Failover
      NumNodeGroups:
        default: Number of Node Groups
      ReplicasPerNodeGroup:
        default: Replicas per Node Group
      VpcId:
        default: VPC Id
      CidrBlocks:
        default: CIDR Blocks
      CidrRange:
        default: CIDR Range
      CidrSize:
        default: CIDR Size
      NumberOfAvailabilityZones:
        default: Number Of Availability Zones
      AvailabilityZones:
        default: Availability Zones
      AccessCidr:
        default: Access CIDR
      AtRestEncryptionEnabled:
        default: Encrypt Persistence
      Port:
        default: Port Number
      TransitEncryptionEnabled:
        default: Encrypt Traffic
      AuthToken:
        default: Authentication Token
      SnapshotRetentionLimit:
        default: Snapshot Retention Limit
      SnapshotWindow:
        default: Snapshot Window
      PreferredMaintenanceWindowDay:
        default: Preferred Maintenance Window Day
      PreferredMaintenanceWindowStartTime:
        default: Preferred MaintenanceWindow Start Time
      PreferredMaintenanceWindowEndTime:
        default: Preferred Maintenance Window End Time
Parameters:
  AccessCidr:
    Description: CIDR block to allow to connect to the cache.
    Type: String
  AtRestEncryptionEnabled:
    Description: A flag that enables encryption at rest when set to true.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  AuthToken:
    Description: The password used to access a password protected server.
    Type: String
    Default: Auto
    AllowedPattern: ^(Auto|[a-zA-Z0-9!&#$^<>-]{16,128})$
    ConstraintDescription: Must be at least 16 characters and no more than 128 characters in length,
      and must only contain alphanumeric characters or !, &, #, $, ^, <, >, and -.
  AutomaticFailoverEnabled:
    Description: Specifies whether a read-only replica is automatically promoted to read/write primary
      if the existing primary fails.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  AvailabilityZones:
    Description: list of availability zones to use, must be the same quantity as specified
      in NumberOfAvailabilityZones
    Type: CommaDelimitedList
    Default: Auto
  CacheNodeType:
    Description: The compute and memory capacity of the nodes in the node group (shard).
    Type: String
    Default: cache.t3.micro
    AllowedValues:
    - cache.m5.large
    - cache.m5.xlarge
    - cache.m5.2xlarge
    - cache.m5.4xlarge
    - cache.m5.12xlarge
    - cache.m5.24xlarge
    - cache.m4.large
    - cache.m4.xlarge
    - cache.m4.2xlarge
    - cache.m4.4xlarge
    - cache.m4.10xlarge
    - cache.t3.micro
    - cache.t3.small
    - cache.t3.medium
    - cache.t2.micro
    - cache.t2.small
    - cache.t2.medium
    - cache.r5.large
    - cache.r5.xlarge
    - cache.r5.2xlarge
    - cache.r5.4xlarge
    - cache.r5.12xlarge
    - cache.r5.24xlarge
    - cache.r4.large
    - cache.r4.xlarge
    - cache.r4.2xlarge
    - cache.r4.4xlarge
    - cache.r4.8xlarge
    - cache.r4.16xlarge
  CidrBlocks:
    Description: comma seperated list of CIDR blocks to place redis into, must be the
      same quantity as specified in NumberOfAvailabilityZones.
    Type: CommaDelimitedList
    Default: Auto
  CidrRange:
    Description: Cidr range to allocate blocks within if CidrBlocks is set to Auto.
    Type: String
    Default: '0.0.0.0/0'
  CidrSize:
    Description: Size of Cidr block to allocate if CidrBlocks is set to Auto.
    Type: String
    Default: '27'
  EngineVersion:
    Description: The version number of the redis engine to use.
    Type: String
    Default: 5.0.6
    AllowedValues:
    - 4.0.10
    - 5.0.0
    - 5.0.3
    - 5.0.4
    - 5.0.5
    - 5.0.6
  NumberOfAvailabilityZones:
    Description: Quantity of subnets to use, if selecting more than 2 the region this
      stack is in must have at least that many Availability Zones
    Type: String
    Default: '2'
    AllowedValues:
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
  NumNodeGroups:
    Description: An optional parameter that specifies the number of node groups (shards)
      for this Redis (cluster mode enabled) replication group
    Type: Number
    Default: '1'
    MinValue: '1'
    ConstraintDescription: Must be at least 1.
  Port:
    Description: The port number on which each member of the replication group accepts connections.
    Type: Number
    Default: '6379'
    MinValue: '1'
    MaxValue: '65535'
    ConstraintDescription: Valid values are 1 to 65535.
  PreferredMaintenanceWindowDay:
    Description: The day of the week which redis maintenance will be performed
    Type: String
    Default: Mon
    AllowedValues:
    - Mon
    - Tue
    - Wed
    - Thu
    - Fri
    - Sat
    - Sun
  PreferredMaintenanceWindowEndTime:
    Description: The weekly end time in UTC for the redis maintenance window, must be
      more than PreferredMaintenanceWindowEndTime and cannot overlap with PreferredBackupWindow
    Type: String
    Default: '06:00'
    AllowedValues:
    - '00:00'
    - '01:00'
    - '02:00'
    - '03:00'
    - '04:00'
    - '05:00'
    - '06:00'
    - '07:00'
    - '08:00'
    - '09:00'
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'
  PreferredMaintenanceWindowStartTime:
    Description: The weekly start time in UTC for the redis maintenance window, must
      be less than PreferredMaintenanceWindowEndTime and cannot overlap with PreferredBackupWindow
    Type: String
    Default: '04:00'
    AllowedValues:
    - '00:00'
    - '01:00'
    - '02:00'
    - '03:00'
    - '04:00'
    - '05:00'
    - '06:00'
    - '07:00'
    - '08:00'
    - '09:00'
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'
  ReplicasPerNodeGroup:
    Description: An optional parameter that specifies the number of replica nodes in each node group (shard).
    Type: Number
    MinValue: '0'
    MaxValue: '5'
    ConstraintDescription: Valid values are 0 to 5.
  SnapshotRetentionLimit:
    Description: The number of days during which automatic snapshots are retained.
      Setting 0 disables automatic snapshots, maximum value is 35
    Type: Number
    Default: '35'
    MinValue: '0'
    MaxValue: '35'
    ConstraintDescription: Valid values are 0 to 35.
  SnapshotWindow:
    Description: The daily time range (in UTC) during which ElastiCache begins
      taking a daily snapshot of your node group (shard).
    Type: String
    Default: 06:00-08:00
    AllowedValues:
    - 00:00-02:00
    - 01:00-03:00
    - 02:00-04:00
    - 03:00-05:00
    - 04:00-06:00
    - 05:00-07:00
    - 06:00-08:00
    - 07:00-09:00
    - 08:00-10:00
    - 09:00-11:00
    - 10:00-12:00
    - 11:00-13:00
    - 12:00-14:00
    - 13:00-15:00
    - 14:00-16:00
    - 15:00-17:00
    - 16:00-18:00
    - 17:00-19:00
    - 18:00-20:00
    - 19:00-21:00
    - 20:00-22:00
    - 21:00-23:00
    - 22:00-24:00
  TransitEncryptionEnabled:
    Description: A flag that enables in-transit encryption when set to true.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  VpcId:
    Description: The ID of the VPC to launch the redis instance into
    Type: AWS::EC2::VPC::Id
Mappings:
  Version2Family:
    4.0.10:
      Family: redis4.0
      MajorVersion: '4.0'
    5.0.0:
      Family: redis5.0
      MajorVersion: '5.0'
    5.0.3:
      Family: redis5.0
      MajorVersion: '5.0'
    5.0.4:
      Family: redis5.0
      MajorVersion: '5.0'
    5.0.5:
      Family: redis5.0
      MajorVersion: '5.0'
    5.0.6:
      Family: redis5.0
      MajorVersion: '5.0'
Conditions:
  2az:
    !Or
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '2'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '3'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '4'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '5'
  3az:
    !Or
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '3'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '4'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '5'
  4az:
    !Or
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '4'
    - !Equals
      - !Ref NumberOfAvailabilityZones
      - '5'
  5az:
    !Equals
    - !Ref NumberOfAvailabilityZones
    - '5'
  AutoCidrs:
    !Equals
    - !Select
      - 0
      - !Ref CidrBlocks
    - Auto
  AutoAzs:
    !Equals
    - !Select
      - 0
      - !Ref AvailabilityZones
    - Auto
  AutoAuthToken:
    !Equals
    - !Ref AuthToken
    - Auto
  EncryptionEnabled:
    !Equals
    - !Ref AtRestEncryptionEnabled
    - 'true'
  ClusterDisabled:
    !Equals
    - !Ref NumNodeGroups
    - '1'
  ClusterEnabled:
    !Not
    - !Equals
      - !Ref NumNodeGroups
      - '1'
  NoReplicas:
    !Equals
    - !Ref ReplicasPerNodeGroup
    - '0'
Resources:
  ElastiCacheReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AtRestEncryptionEnabled: !Ref AtRestEncryptionEnabled
      AuthToken:
        !If
        - AutoAuthToken
        - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
        - !Ref AuthToken
      AutomaticFailoverEnabled:
        !If
        - NoReplicas
        - 'false'
        - !Ref AutomaticFailoverEnabled
      CacheNodeType: !Ref CacheNodeType
      CacheParameterGroupName: !Ref ElastiCacheParameterGroup
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      Engine: redis
      EngineVersion: !Ref EngineVersion
      KmsKeyId:
        !If
        - EncryptionEnabled
        - !GetAtt KMSKey.Arn
        - !Ref AWS::NoValue
      NumNodeGroups: !Ref NumNodeGroups
      Port: !Ref Port
      PreferredMaintenanceWindow: !Sub ${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowStartTime}-${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowEndTime}
      ReplicasPerNodeGroup: !Ref ReplicasPerNodeGroup
      ReplicationGroupDescription: !Sub StackName ${AWS::StackName}
      SecurityGroupIds:
        - !Ref SecurityGroup
      SnapshotRetentionLimit: !Ref SnapshotRetentionLimit
      SnapshotWindow: !Ref SnapshotWindow
      TransitEncryptionEnabled: !Ref TransitEncryptionEnabled
  ElastiCacheParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      Description: !Sub StackName ${AWS::StackName}
      CacheParameterGroupFamily:
        !FindInMap
        - Version2Family
        - !Ref EngineVersion
        - Family
      Properties:
        !If
        - ClusterEnabled
        - cluster-enabled: 'yes'
        - {}
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 0
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 0
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  Subnet2:
    Condition: 2az
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 1
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 1
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  Subnet3:
    Condition: 3az
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 2
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 2
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  Subnet4:
    Condition: 4az
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 3
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 3
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  Subnet5:
    Condition: 5az
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 4
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      VpcId: !Ref VpcId
      CidrBlock:
        !Select
        - 4
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: !Sub StackName ${AWS::StackName}
      SubnetIds:
      - !Ref Subnet1
      - !If
        - 2az
        - !Ref Subnet2
        - !Ref AWS::NoValue
      - !If
        - 3az
        - !Ref Subnet3
        - !Ref AWS::NoValue
      - !If
        - 4az
        - !Ref Subnet4
        - !Ref AWS::NoValue
      - !If
        - 5az
        - !Ref Subnet5
        - !Ref AWS::NoValue
  KMSKey:
    Condition: EncryptionEnabled
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub StackName ${AWS::StackName}
      Enabled: 'true'
      EnableKeyRotation: 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: '*'
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub StackName ${AWS::StackName}
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref Port
        ToPort: !Ref Port
        CidrIp: !Ref AccessCidr
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: awsservicebroker-cssc
      Prefix: functions/
      Objects:
      - get_cidrs/lambda_function.zip
      - get_azs/lambda_function.zip
      - generate_password/lambda_function.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-copier
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::awsservicebroker-cssc/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: '240'
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  AWSSBInjectedGetCidrsRole:
    Condition: AutoCidrs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - ec2:DescribeAvailabilityZones
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetCidrsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Condition: AutoCidrs
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetCidrsRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_cidrs/lambda_function.zip
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedGetCidrs:
    Condition: AutoCidrs
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetCidrsLambda.Arn
      Qty: !Ref NumberOfAvailabilityZones
      VpcId: !Ref VpcId
      CidrRange: !Ref CidrRange
      CidrSize: !Ref CidrSize
  AWSSBInjectedGetAzsRole:
    Condition: AutoAzs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeAvailabilityZones
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetAzsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Condition: AutoAzs
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetAzsRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_azs/lambda_function.zip
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedGetAzs:
    Condition: AutoAzs
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetAzsLambda.Arn
      Qty: !Ref NumberOfAvailabilityZones
  AWSSBInjectedGeneratePasswordRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGeneratePasswordLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGeneratePasswordRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_password/lambda_function.zip
      Runtime: python3.6
      Timeout: '60'
  AWSSBInjectedGeneratePassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGeneratePasswordLambda.Arn
      Length: '32'
Outputs:
  ConfigurationEndpointAddress:
    Condition: ClusterEnabled
    Value: !GetAtt ElastiCacheReplicationGroup.ConfigurationEndPoint.Address
  ConfigurationEndpointPort:
    Condition: ClusterEnabled
    Value: !GetAtt ElastiCacheReplicationGroup.ConfigurationEndPoint.Port
  PrimaryEndpointAddress:
    Condition: ClusterDisabled
    Value: !GetAtt ElastiCacheReplicationGroup.PrimaryEndPoint.Address
  PrimaryEndpointPort:
    Condition: ClusterDisabled
    Value: !GetAtt ElastiCacheReplicationGroup.PrimaryEndPoint.Port
  ReadEndpointAddresses:
    Condition: ClusterDisabled
    Value: !GetAtt ElastiCacheReplicationGroup.ReadEndPoint.Addresses
  ReadEndpointPorts:
    Condition: ClusterDisabled
    Value: !GetAtt ElastiCacheReplicationGroup.ReadEndPoint.Ports
  AuthToken:
    Value:
      !If
      - AutoAuthToken
      - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
      - !Ref AuthToken
